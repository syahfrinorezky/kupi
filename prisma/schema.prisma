generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  role                Role                 @default(USER)
  emailVerified       DateTime?
  status              Status               @default(INACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  accounts            Account[]
  categories          Category[]
  resetPasswordTokens ResetPasswordToken[]
  transactions        Transaction[]
  verificationTokens  VerificationToken[]

  @@index([email])
}

model Account {
  id           Int           @id @default(autoincrement())
  userId       Int
  name         String
  type         String
  balance      Decimal       @default(0.000000000000000000000000000000)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([userId])
}

model Category {
  id           Int           @id @default(autoincrement())
  userId       Int
  name         String
  type         CategoryType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([userId, name])
  @@index([userId])
}

model Transaction {
  id          Int       @id @default(autoincrement())
  userId      Int
  accountId   Int
  categoryId  Int
  date        DateTime
  amount      Decimal
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  account     Account   @relation(fields: [accountId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
}

model VerificationToken {
  id           Int      @id @default(autoincrement())
  userId       Int
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  used         Boolean  @default(false)
  sessionToken String?  @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CategoryType {
  INCOME
  EXPENSE
}
